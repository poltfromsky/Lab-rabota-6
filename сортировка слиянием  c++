#include <iostream>
#include <vector>
using namespace std;

// Функция для слияния двух отсортированных подмассивов
void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;  // длина левого подмассива
    int n2 = right - mid;     // длина правого подмассива

    vector<int> L(n1), R(n2);

    // Копируем данные во временные массивы
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    // Индексы для обхода подмассивов
    int i = 0, j = 0, k = left;

    // Слияние двух подмассивов обратно в arr список
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Копируем оставшиеся элементы
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

// Рекурсивная функция сортировки слиянием
void mergeSort(vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        // Сортируем левую и правую половины
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        // Сливаем отсортированные половины
        merge(arr, left, mid, right);
    }
}

// Печать массива
void printArray(const vector<int>& arr) {
    for (int num : arr)
        cout << num << " ";
    cout << endl;
}

int main() {
    vector<int> arr = {38, 27, 43, 3, 9, 82, 10};
    cout << "Исходный массив: ";
    printArray(arr);

    mergeSort(arr, 0, arr.size() - 1);

    cout << "Отсортированный массив: ";
    printArray(arr);

    return 0;
}
