import java.util.Arrays;

public class Main {
    // Метод heapify поддерживает свойство max-heap
    public static void heapify(int[] arr, int n, int i) {
        int largest = i;       // Изначально корень — наибольший
        int left = 2 * i + 1;  // левый дочерний элемент
        int right = 2 * i + 2; // правый дочерний элемент

        // Если левый элемент больше корня
        if (left < n && arr[left] > arr[largest])
            largest = left;

        // Если правый элемент больше текущего наибольшего
        if (right < n && arr[right] > arr[largest])
            largest = right;

        // Если наибольший элемент не корень
        if (largest != i) {
            int temp = arr[i];
            arr[i] = arr[largest];
            arr[largest] = temp;

            // Рекурсивно heapify поддерево
            heapify(arr, n, largest);
        }
    }

    // Основной метод сортировки (Heap Sort)
    public static void heapSort(int[] arr) {
        int n = arr.length;

        // Строим max-heap
        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(arr, n, i);

        // Извлекаем элементы по одному
        for (int i = n - 1; i >= 0; i--) {
            // Перемещаем текущий корень (максимум) в конец
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // Вызываем heapify на уменьшенной куче
            heapify(arr, i, 0);
        }
    }

    public static void main(String[] args) {
        int[] arr = {12, 11, 13, 5, 6, 7};

        System.out.println("Исходный массив: " + Arrays.toString(arr));

        heapSort(arr);

        System.out.println("Отсортированный массив: " + Arrays.toString(arr));
    }
}
